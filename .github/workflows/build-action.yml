name: Create Release
on:
  workflow_dispatch:
  # This Action only starts when you go to Actions and manually run the workflow.
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# see here for variables
jobs:
  package:
    strategy:
      matrix:
        platform: [windows-latest, macos-latest]
        go-version: [1.18]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: install frontend
        run: |
          cd frontend && npm install
      - name: build frontend macOS
        if: matrix.platform == 'macos-latest'
        run: |
          cd frontend && CI= npm run build
      - name: build frontend windows
        if: matrix.platform == 'windows-latest'
        env:
          CI: false
        run: |
          cd frontend && npm run build
      # You may need to manually build you frontend manually here, unless you have configured frontend build and install commands in wails.json.
      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Build Wails app
        env:
          CI: false
        run: |
          wails build -ldflags "-X main.version=${{ github.ref }}"
      - name: MacOS download gon for code signing and app notarization
        if: matrix.platform == 'macos-latest'
        run: |
          brew install mitchellh/gon/gon
      - name: Strip assets
        if: matrix.platform == 'macos-latest'
        run: | #1. make sure any attributes are removed
          xattr -lr "./build/bin/Greenfinch.app"
      - name: Change permissions
        if: matrix.platform == 'macos-latest'
        run: | #2. set permissions on anything inside the app
          chmod -R u+rw "./build/bin/Greenfinch.app"
      - name: Import Code-Signing Certificates for macOS
        if: matrix.platform == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Sign our macOS binary
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_USER: ${{ secrets.APPLE_USER }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          echo "Signing app"
          gon -log-level=info ./build/darwin/gon-sign-app.json
      - name: Retrieve DMG generator
        if: matrix.platform == 'macos-latest'
        run: |
          brew install graphicsmagick imagemagick
      - name: Retrieve DMG generator
        if: matrix.platform == 'macos-latest'
        run: |
          npm install --global create-dmg
      - name: Generate DMG
        if: matrix.platform == 'macos-latest'
        run: |
          create-dmg --overwrite --dmg-title=Greenfinch.dmg ./build/bin/Greenfinch.app ./build/bin && mv ./build/bin/Greenfinch*.dmg ./build/bin/Greenfinch.dmg
      - name: Sign our macOS binary
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_USER: ${{ secrets.APPLE_USER }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          echo "Signing DMG"
          gon -log-level=info ./build/darwin/gon-sign-dmg.json
      - name: Sign Windows binaries
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Creating certificate file"
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WIN_SIGNING_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          echo "Signing our binaries"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /td sha256 /f certificate\certificate.pfx /p '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' .\build\bin\Greenfinch.exe
      - name: upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: greenfinch-binaries-macos
          path: build/bin/*
      - name: upload artifacts windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: greenfinch-binaries-windows
          path: build/bin/*
    #    if: contains(github.ref, 'tags/v') -- run if the tag starts with a v, like v1.0.0
  release:
    name: Create Github Release
    needs: package #don't want to create a release if a package failed to create.
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: tagged--${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
  deploy:
    name: Deploy artifacts
    needs: release
    strategy:
      matrix:
        platform: [windows-latest, macos-latest]
        go-version: [1.18]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Download windows artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/download-artifact@v3
        with:
          name: greenfinch-binaries-windows
      - name: upload windows release artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: Greenfinch.exe
          asset_path: ./Greenfinch.exe
          asset_content_type: application/gzip
      - name: Download macOS artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/download-artifact@v3
        with:
          name: greenfinch-binaries-macos
      - name: upload macOS release dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: Greenfinch.dmg
          asset_path: ./Greenfinch.dmg
          asset_content_type: application/gzip
